pico-8 cartridge // http://www.pico-8.com
version 41
__lua__

debug_message = ""

floor = 6
wall = 140
clown = 48
guy = 38
bannana = 8
prout = 12
pie = 70
pied_man = 76

bump = 166
bump_se_m = 198
bump_sw_m = 199
bump_ne_m = 214
bump_nw_m = 215

lvls = {
	{ x = 0, y = 0 },
	{ x = 8, y = 0 },
	{ x = 16, y = 0 },
	{ x = 24, y = 0 },
	{ x = 32, y = 0 },
	{ x = 40, y = 0 },
	{ x = 48, y = 0 },
	{ x = 56, y = 0 }
}

current_lvl = 1

end_sprite = { 248, 250, 252 }

level = {}

floor_tile = { type = floor, sprite = floor }
game_elements = {}

is_win = false
timer_end = 0

anim_time = 1
clown_spr = {
	inv_speed = 8,
	down = { { idx = 48 }, { idx = 50 }, { idx = 48 }, { idx = 50, flip_x = true } },
	up = { { idx = 80 }, { idx = 82 }, { idx = 80 }, { idx = 82, flip_x = true } },
	right = { { idx = 112 }, { idx = 114 }, { idx = 112 }, { idx = 116 } },
	left = { { idx = 112, flip_x = true }, { idx = 114, flip_x = true }, { idx = 112, flip_x = true }, { idx = 116, flip_x = true } }
}

end_clown_spr = {
	inv_speed = 4,
	static = { { idx = 144 }, { idx = 146 } }
}

guy_spr = {
	inv_speed = 8,
	static = { { idx = 38 }, { idx = 40 } }
}

bump_spr = {
	inv_speed = 2,
	static = { { idx = 166 } },
	bump = { { idx = 168 }, { idx = 170, next = "static" } }
}

pie_spr = {
	inv_speed = 1,
	down = { { idx = 70 } },
	up = { { idx = 102 } },
	right = { { idx = 134 } },
	left = { { idx = 134, flip_x = true } }
}

function animate(element)
	local frame_set = element.frames[element.frame_set]
	local idx = flr(anim_time / element.frames.inv_speed % #frame_set) + 1
	local fr = frame_set[idx]
	local scale = 2
	local flip_x = element.flip_x or fr.flip_x
	local flip_y = element.flip_y or fr.flip_y
	spr(fr.idx, (element.x - 1) * 16, (element.y - 1) * 16, scale, scale, flip_x, flip_y)
	if fr.next then
		element.frame_set = fr.next
	end
end

function cr_element(type, x, y, frames, frame_set)
	local element = {
		dx = 0,
		dy = 0,
		type = type,
		x = x,
		y = y,
		frames = frames,
		frame_set = frame_set
	}

	add(game_elements, element)
	return element
end

function set_level(lvl_pos)
	level = {}
	game_elements = {}
	is_win = false
	timer_end = 0

	for y = 0, 7 do
		local row = {}
		for x = 0, 7 do
			local mx = lvl_pos.x + x
			local my = lvl_pos.y + y
			sprite = mget(mx, my)
			tile = {
				type = floor
			}

			if sprite == clown then
				cr_element(clown, x + 1, y + 1, clown_spr, "down")
			elseif sprite == guy then
				cr_element(guy, x + 1, y + 1, guy_spr, "static")
			elseif sprite == bannana then
				cr_element(bannana, x + 1, y + 1)
			elseif sprite == pie then
				cr_element(pie, x + 1, y + 1, pie_spr, "down")
			elseif sprite == bump_se_m then
				local bmp = cr_element(bump, x + 1, y + 1, bump_spr, "static")
			elseif sprite == bump_sw_m then
				local bmp = cr_element(bump, x + 1, y + 1, bump_spr, "static")
				bmp.flip_x = 1
			elseif sprite == bump_ne_m then
				local bmp = cr_element(bump, x + 1, y + 1, bump_spr, "static")
				bmp.flip_y = 1
			elseif sprite == bump_nw_m then
				local bmp = cr_element(bump, x + 1, y + 1, bump_spr, "static")
				bmp.flip_x = 1
				bmp.flip_y = 1
			elseif sprite == prout then
				cr_element(prout, x + 1, y + 1)
			elseif sprite != floor then
				tile.type = wall
			end

			add(row, tile)
		end

		add(level, row)
	end

	for idx = #game_elements, 2, -1 do
		for jdx = idx - 1, 1, -1 do
			if game_elements[idx].type == prout then
				local temp = game_elements[jdx]
				game_elements[jdx] = game_elements[idx]
				game_elements[idx] = temp
				debug_message = "idx " .. idx .. " jdx " .. jdx
			end
		end
	end

	for y = 1, #level do
		for x = 1, #level[y] do
			if level[y][x].type == wall then
				--auto tile
			end
		end
	end
end

function _init()
	set_level(lvls[current_lvl])
end

function set_next_lvl()
	current_lvl = current_lvl + 1
	if current_lvl > #lvls then
		current_lvl = 1
	end

	set_level(lvls[current_lvl])
end

function get_element_at(x, y)
	if x < 1 or y < 1 or x > 8 or y > 8 then
		return false
	end

	for idx = 1, #game_elements do
		local element = game_elements[idx]
		if element.x == x and element.y == y then
			return element
		end
	end

	return false
end

function can_move(element)
	local nx = element.x + element.dx
	local ny = element.y + element.dy
	if nx < 1 or ny < 1 or nx > 8 or ny > 8 then
		return false
	end

	if level[ny][nx].type == wall then
		return false
	end

	local el = get_element_at(nx, ny)

	if not el then
		return true
	end

	if el.type == bannana then
		return true
	end

	if el.type == prout then
		return true
	end

	if el.disabled then
		return true
	end

	if el.type == bump then
		if element.dx > 0 then
			return el.flip_x
		end
		if element.dx < 0 then
			return not el.flip_x
		end
		if element.dy > 0 then
			return el.flip_y
		end
		if element.dy < 0 then
			return not el.flip_y
		end
	end

	if el.type == guy and element.type == pie or el.type == pie and element.type == guy then
		return true
	end

	return false
end

max_bump = 100
nb_bump = 0

function try_push(x, y, dx, dy)
	if x < 1 or y < 1 or x > 8 or y > 8 then
		return false
	end

	local element = get_element_at(x, y)
	if element then
		element.dx = dx
		element.dy = dy
		return true
	end
end

frame = 0
move_cadence = 3

function move_element(element)
	if element.dx == 0 and element.dy == 0 then
		return
	end

	local nx = element.x + element.dx
	local ny = element.y + element.dy
	local bumped = false
	local elem_under = get_element_at(nx, ny)
	if can_move(element) then
		if elem_under then
			if elem_under.type == bannana then
				element.slipping = true
				elem_under.delete_me = true
			end
			if elem_under.type == bump then
				if element.dx != 0 then
					bumped = true
					elem_under.frame_set = "bump"
					element.dx = 0
					if elem_under.flip_y then
						element.dy = -1
					else
						element.dy = 1
					end
				end
				if not bumped and element.dy != 0 then
					element.dy = 0
					bumped = true
					elem_under.frame_set = "bump"
					if elem_under.flip_x then
						element.dx = -1
					else
						element.dx = 1
					end
				end
			end

			if elem_under.type == prout then
				element.slipping = false
			end

			if elem_under.type == guy and element.type == pie or elem_under.type == pie and element.type == guy then
				elem_under.delete_me = true
				element.delete_me = true

				cr_element(pied_man, elem_under.x, elem_under.y)
			end
		end

		element.x = nx
		element.y = ny
	else
		element.slipping = false
	end

	if not element.slipping and not bumped then
		element.dx = 0
		element.dy = 0
	end

	if bumped and not can_move(element) then
		sfx(0)
		debug_message = element.dx .. "," .. element.dy
		if element.dy != 0 then
			element.dy = 0
			if elem_under.flip_x then
				element.dx = -1
			else
				element.dx = 1
			end
		elseif element.dx != 0 then
			element.dx = 0
			if elem_under.flip_y then
				element.dy = -1
			else
				element.dy = 1
			end
		end
	end

	if element.dx != 0 or element.dy != 0 then
		nb_bump = nb_bump + 1
		if nb_bump > max_bump then
			element.dx = 0
			element.dy = 0
			element.slipping = false
			nb_bump = 0
		end
	else
		nb_bump = 0
	end
end

function check_win()
	for idx = 1, #game_elements do
		if game_elements[idx].type == guy then
			return false
		end
	end

	return true
end

player = nil

function _update()
	frame = frame + 1
	local dx = 0
	local dy = 0

	local elem_slipping = false
	for idx = 1, #game_elements do
		if game_elements[idx].dx != 0 or game_elements[idx].dy != 0 then
			elem_slipping = true
		end
	end

	local wining = check_win()
	if not wining then
		if not elem_slipping then
			if btnp(0) then
				dx = -1
			end

			if btnp(1) then
				dx = 1
			end

			if btnp(2) then
				dy = -1
			end

			if btnp(3) then
				dy = 1
			end
		end

		for idx = 1, #game_elements do
			if game_elements[idx].type == clown then
				player = game_elements[idx]
			end
		end

		if dx != 0 or dy != 0 then
			local nx = player.x + dx
			local ny = player.y + dy

			player.dx = dx
			player.dy = dy
			if not can_move(player) then
				try_push(nx, ny, dx, dy)
			end
		end
	end

	-- update push
	for idx = #game_elements, 1, -1 do
		local element = game_elements[idx]

		if element.frames then
			if element.dx > 0 and element.frames["right"] then element.frame_set = "right" end
			if element.dx < 0 and element.frames["left"] then element.frame_set = "left" end
			if element.dy > 0 and element.frames["down"] then element.frame_set = "down" end
			if element.dy < 0 and element.frames["up"] then element.frame_set = "up" end
		end

		if flr(frame % move_cadence) == 0 then
			move_element(element)
		end
	end

	--delete elements
	for idx = #game_elements, 1, -1 do
		local element = game_elements[idx]
		if element.delete_me then
			del(game_elements, element)
		end
	end

	if not is_win and wining then
		for idx = 1, #game_elements do
			if game_elements[idx].type == clown then
				game_elements[idx].frames = end_clown_spr
				game_elements[idx].frame_set = "static"
			end
		end
	end

	if wining then
		is_win = true
		timer_end = timer_end + 1
	end

	if btnp(4) and not wining then
		set_level(lvls[current_lvl])
	end

	if btnp(5) and wining then
		set_next_lvl()
	end
end

function _draw()
	anim_time = anim_time + 1

	cls()

	for x = 1, 8 do
		for y = 1, 8 do
			local tile = level[y][x]
			local sx = (x - 1) * 16
			local sy = (y - 1) * 16
			spr(tile.type, sx, sy, 2, 2)
		end
	end

	for idx = 1, #game_elements do
		local element = game_elements[idx]
		if not element.frames then
			spr(element.type, (element.x - 1) * 16, (element.y - 1) * 16, 2, 2, element.flip_x, element.flip_y)
		else
			animate(element, (element.x - 1) * 16, (element.y - 1) * 16)
		end
	end

	if is_win and timer_end > 20 then
		print("press ‚ùé for next prank!", 8, 8, 10)
		local phase = timer_end / 8
		for idx = 1, #end_sprite do
			local index = flr(idx - phase) % #end_sprite + 1

			spr(
				end_sprite[index],
				52 + idx * 16,
				52,
				2, 1
			)
		end
	else
		print("press üê± to reset prank", 8, 4, 10)
	end

	if debug_message then
		-- print(debug_message, 5,90,10)
	end
end

__gfx__
00000000111111111111111111111111d22dd22dd22dd22d666d6666d666666d0000000000000000000000000000000000000000000000000000000000000000
000000001eeee7eee7eee7eeee7eeee1d22dd22dd22dd22d66666666666666d60000000000000000000000000000000000000000000000000000000000000000
0000000018ee777e777e777ee777ee8122dd22dddd22dd2266666666666666660000000000000000000000000000000000000000000000000000000000000000
0000000018825552555255525555588122dd22dddd22dd22d6666666666666660000001110000000000000000000000000000000000000000000000000000000
0000000018622dd22dd22dd22ddd56812dd2255555522dd2666666666d6666660000001210000000000000111000000000011111110000000000000000000000
0000000016622dd22dd22dd22ddd56612dd22dddddd22dd2666666666d666d660000001210000000000000121000010000188888881000000000000000001110
00000000186522dd22dd22dd22dd2681dd2258d22d8522dd66666666666666660000111a11100000001100121001191001888228288101100011111110018810
00000000188522dd22dd22dd22dd2881dd225881188522dd6d66666666666666000199aa999110000191111a1119991001888822888118100188888881118810
011111101885d22dd22dd22dd22d5881d22d58811885d22d6d66666666666666001999aaa9999100017999aa9111171001888888888288101882288288122881
199999111865d22dd22dd22dd22d5681d22d586ee685d22d6666666666666666019991aaa1199910001772aaaa77110001288888882222101288222882222221
199199111662dd22dd22dd22dd22566122dd56666665dd226666d66666666666011111aaa1111110000111777771000001222222222112101228888822112221
199199111862dd22dd22dd22dd22568122dd22555522dd226666d6d6666666660000001aa1000000000000177710000001122222221101101122222221101221
1999991118822dd22dd22dd22dd228812dd22dd22dd22dd266666666666666660000001aa1000000000000011100000000111111111000000111111111000111
1999991118622dd22dd22dd22dd226812dd22dd22dd22dd2666666666666666600000001a1000000000000000000000000000000000000000000000000000000
11111111166522dd22dd22dd22dd2661dd22dd2222dd22dd66666666666666660000000111000000000000000000000000000000000000000000000000000000
01111110186522dd22dd22dd22dd2681dd22dd2222dd22ddd666666666dd666d0000000000000000000000000000000000000000000000000000000000000000
111111011885d22dd22dd22dd22d5881111101110111111000000000011100000000000000000000000000000000000000000000000000000000000000000000
999991191865d22dd22dd22dd22d5681999119911bbbbb1100001111122210000000000001111000000000000000000000000000000000000000000000000000
991991191665dd22dd22dd22dd225661999119911bb1bb1100012221122221000000111112222100000000000000000000000000000000000000000000000000
991991191865dd22dd22dd22dd225681911119911bb1bb1100122222222221000001222112222100000000000000000000000000011110000000000001111000
99999119188555525552555255522881991111111bbbbb1100122111111121000012222222222100000000000011110000001111122221000000111112222100
999991191822ddd2ddd2ddd22ddd2281911019911bb11111001121fffff121000012211111112100000011000122210000012221122221000001222112222100
1111111112222d222d222d2222d222211110111111111001001f21f1ff1f1000001121fffff12100000122111222210000122222222221000012222222222100
111111011111111111111111111111111100111101111000001ffff1ff1f1000001f21f1ff1f1000001222211222210000122111111121000012211111112100
01100111111001100000000000000000111111011111101100011fffeeff1000001ffff1ff1f10000012221222112100001121fffff12100001121fffff12100
01811188881118100110011111100110bbbbb11bbbbb11bb0011177fff771100011117ffeef71110001221f111f12110001f21ffffff1000001f21f1ff1f1000
01881888888188100181118888111810bb1bb11bb1bb11bb0111117cc77111101ff1177fcc771ff1011221fffff121f101111ff1ff1f100001111ff1ff1f1000
01188118811881100188188888818810bb1bb11bb1bb11bb1ff1111cc1111ff11f1d111cc11111f11ff121ffffff11f11ff11fffeeff11101ff11fffeeff1110
01111771177111100118811881188110bbbb111bbbbb11bb1f1d1111111111f1166d11111111101011f111f1ff1111101f1d177fff771ff11f1d177fff771ff1
00117777777711000111177117711110bb1bb113bbb311bb166d11111111101016612111111221001612221fe12221001661111cc1111ff11661111cc1111ff1
000171788717100000117777777711001111111111111111166d12100122210011112210012221001612221cc12221001612221cc12221101612221cc1222110
00017178871710000001717887171000111011011111101111111110011111000001111001111100111111111111110011122211112221001112221111222100
00111787787111000001717887171100111101111111110000000000000000000000011110000000000146000041000000001111111000000110011111100110
018811788711881000011787787181101bb11bbbb11bb11000000000000000000000099990110000140066000660000000019999994100000181118888111810
01118c1111c8111100188178871817711bb11bbbb11bb11000000111111000000011044440991100466000000600000100194744449410000188188888818810
1771cac11cac177101111111111177711bb111bb111bb11000011919919110000199047770449910666000000000006101947797974991000118811881188110
171111cccc111171018881ccccc11110bbb111bb1111111000199414414991001944006770644491000006000000066001477711179441000111177117711110
01188811118881100122211111881000bbb111bb111bb11001114476674411109447700600667449000006700000000001711121117771000011777777771100
01888110011888100122211001110000111111111111111019417766777714914476700000777740000000000000000001122777221111000001717887171000
00111110011111100011100000000000111100111001110014467766776664411000000000000000600000000000000000127997711121000001717887171000
0110011111100110000000000000000001111111111111011276677676677721147077777706777400067000076007660011749f777121000011178778711100
018111888811181001100011110001101ffff1ffff1ff11f117776766777761100000777000000000000670000000000001f21f1771f10000188117887118810
018818888881881001810188881018101ff111ff1f1ff11f12766667676666211776000000766774000000006000000001111ff1ff1f100001118c1111c81111
018888888888881001881888888188101ffff1ff1f1ff11f1426777667766241447600000767771166000000000077001ff11fffeeff11101771cac11cac1771
01188888888881100188888888888810111ff1ffff1ff11f0141776666761410141707767766744166000000000006601f1d177fff771ff1171111cccc111171
001188888888110000188888888881001ffff1ff111fff1f0011441441441100111404666064141100000700000000661661111cc1111ff10118881111888110
0001188888811000000188888888100011111111111111110000111111111000011104414044111016000600006006611617721c912221100018881001188810
00017188881710000000188888810000011111111011111100000000000000000001011111011000110066600066011011172211112221000011111001111110
00111711117111000001718888171000111111111111111000001110011000000017771001171100012011000166006100000000000000000000000000000000
018811cccc1188100018171111718100fff1ffff1ff1ff1100017771177110000176666017667710124022000611106600000000000000000000000000000000
01118cccccc81111018881cccc181710fff1ff111ff1ff1100176666666771000012212060122171000044000022202100000000000000000000000000000000
1771cccc1ccc177117111cc1ccc11710f1f1ffff1fffff1101612212212217101004999000244291000000000000004200000000000000000000000000000000
1711cccc1ccc117117771cc1c1111100fff111ff1ff1ff1116144999424429109400112000014449000044000444000400000000000000000000000000000000
0118cc1111cc811017171c1118881000f1f1ffff1ff1ff1111944112211444914110099021022144100004400044440000000000000000000000000000000000
00188810018881000111222112221000111111111111111119411299442214412244044044004221440000000000444000000000000000000000000000000000
00111110011111000001111111111000111111111111011014224444444422110000000044400000000000000000000000000000000000000000000000000000
11111011110011000000000000000000000000000000000014144444444442410000000000000440000000000000000400000000000000000000000000000000
18881118811181001111101111000000111110111100000011144444444441411444404004400440000000000000000400000000000000000000000000000000
18888188881881001888111881111110188811188111111014114444444411111444004004400000444000000004000000000000000000000000000000000000
18888888118811001888818888188810188881888818881011411244442114111140044004004111440004000000000000000000000000000000000000000000
18888888771111001888888811881100188888881188110001114111111141104100244000021141400000000044000000000000000000000000000000000000
01811188777110001888888877111100188888887711110000111441444111000004111000111411000040000040004100000000000000000000000000000000
01817718717871000181118877711000018111887771100000001111111100000011441000441110000440000000021100000000000000000000000000000000
01117717717881000181771871787100018177187178710000000000000000000001111000111000002440000000111100000000000000000000000000000000
00111777877110000111771771788100011177177178810000000001100000000000001991000000001400440400010011111111111111110000000000000000
0001111178810000001117778771100000111777877110000000001991000000000012994401000001400040000066101eeee7eee7eee7e10000000000000000
00011188111000000000111178810110000011117881011000000299441000000001929400771000140000006000000018ee777e777e77d10000000000000000
001c18881ca10000001118881110188100011888111012210000121447710000001990046070710000000000000000611882555255525dd10000000000000000
001c17771cc10000017778811ca18881001c188881a1222100019294776710000000000060006111000000000000066018622dd22dd226d10000000000000000
000117771c1110000177781cccc18810001cc1177711221000192996666611100004900000066771090000000000000016622dd22dd226610000000000000000
000011111188810000177111111881000111111777122100001421466776771001424000667000001900000000666000186522dd22dd26d10000000000000000
000188888888881000111221188810001888888111221000001429967777771001429660760000001406700000760000188522dd22dd2dd10000000000000000
0110011111100110011001111110011011000111111000110014199677677100004196000000777100000000000000661885d22dd22dddd10000000000000000
0181118888111810018111888811181018111188881111810012124666661000000146000600071000600000006000611865d22dd22dd6d10000000000000000
0188188888818810018818888881881018818888888818810012199666771000010006606600010000660000000000001662dd22dd22d6610000000000000000
0118811881188110011818888881811018818888888818810001219267710000012100006707710000000000076000001862dd22dd22d6d10000000000000000
01111771177111100118811881188110018818888881881000001192271000000012190000071000101900000660061018822dd22dd22dd10000000000000000
00117777777711000011177117711100011811888811811000000144221000000001190270010000121900000000661018dd666dd666ddd10000000000000000
0001717887171000000177777777100001111118811111100000001441000000000014422100000001144026200011001dddd6dddd6dddd10000000000000000
00017178871710000111717887171110171771111117717100000001100000000000014410000000001140411000000011111111111111110000000000000000
01111787787111101717117887117171166671688617666100000000000000000000000000000000000000000000000000000000000000000000000000000000
171711788711717117771117711177711666771881776661000000000000000000ffffffffffff00000111111111100000000000000000000000000000000000
17771111111177711777711111177771166671111117666100001111111100000ffffffffffffe70001fffffffff910000000000000000000000000000000000
177771c11c17777101111ac11ca11110011111c11c11111000019fffff9110000fffffffffffee700199fffffff9111000000000000000000000000000000000
011111cccc1111100001cccccccc100000011cccccc1100000199fffff1110000fff77777777ee70019998888882211000000000000000000000000000000000
01188811118881100118221111228110011211111111211000199888822210000fff7777777eee70019988888822210000000000000000000000000000000000
01888110011888100188811001188810018881100118881000199888222100000fff7777777ee700019988888222100000000000000000000000000000000000
00111110011111000011111001111100001111100111110000199882221000000fff777777eee700019988882221000000000000000000000000000000000000
01100111111001100111001111001110000001111100000000199822210000000fff77777eee7000019988822210000000000000000000000000000000000000
01811188881118100181118888111810011111888811111000199222100000000fff7777eeee7000019988222100000000000000000000000000000000000000
01881888888188100188188888818810018818888881881000191221000000000fff777eeee70000019982221000000000000000000000000000000000000000
01888888888888100118888888888110011888888888811000111210000000000fff7eeeee700000019122210000000000000000000000000000000000000000
01188888888881100018888888888100001888888888810000011100000000000ffeeeee77000000011122100000000000000000000000000000000000000000
00118888888811000011888888881100001118888881110000000000000000000feeee7700000000001111000000000000000000000000000000000000000000
00011888888110000001118888111000011111111111111000000000000000000077770000000000000110000000000000000000000000000000000000000000
00017188881710001111771111771111016177777777161000000000000000000000000000000000000000000000000000000000000000000000000000000000
11111711117111111771177777711771016117777771161001111110011111100000000000000000000000000000000000000000000000000000000000000000
177181cccc181771177181cccc181771001281cccc18210019ffff1111ffff910000000000000000000000000000000000000000000000000000000000000000
17788cccccc8877117188cccccc8817100118ccc1cc8110019888221122888910000000000000000000000000000000000000000000000000000000000000000
1778cccc1ccc87710111cccc1ccc11100011cccc1ccc110019882210012288910000000000000000000000000000000000000000000000000000000000000000
011ccccc1cccc110001ccccc1cccc100001888111188810019822100001228910000000000000000000000000000000000000000000000000000000000000000
001ccc1111ccc1000018881111888100001222100122210019221000000122910000000000000000000000000000000000000000000000000000000000000000
00188810018881000018881001888100001222100122210011210000000012110000000000000000000000000000000000000000000000000000000000000000
00111110011111000011111001111100001111100111110001100000000001100000000000000000000000000000000000000000000000000000000000000000
01111101111001100011111111100000000011111111100001100000000001100000000000000000000000000000000000000000000000000000000000000000
01888111881118100018881188810110000018881188811111210000000012110000000000000000000000000000000000000000000000000000000000000000
01888818888188100018881888811810000018881888811119221000000122910000000000000000000000000000000000000000000000000000000000000000
01888888811881100018888888888810000018888888888119822100001228910000000000000000000000000000000000000000000000000000000000000000
01888888877111100018888888188110000188888881881119882210012288910000000000000000000000000000000000000000000000000000000000000000
00181118877711000018111181711100000188111881111019888221122888910000000000000000000000000000000000000000000000000000000000000000
00181771871787100018177187771100000181771811111119ffff1111ffff910000000000000000000000000000000000000000000000000000000000000000
00111771771788100001177177111110000011771777171101111110011111100000000000000000000000000000000000000000000000000000000000000000
00011177787711000000117711171210000001177711171100111000001110000000000000000000000000000000000000000000000000000000000000000000
0000111111111000000011111887610000000111118887610188110001aaa1000000000000000000000000000000000000000000000000000000000000000000
0001c188811110000001cc1888876100000011cc18888761188811001aa4aa100000000000000000000000000000000000000000000000000000000000000000
001cc18888777000001ccc18881111000001cccc1881111111881100111aaa110000000000000000000000000000000000000000000000000000000000000000
001ccc1188771000011cccc11110000000181cccc11100001188110001aa41110000000000000000000000000000000000000000000000000000000000000000
0011ccc1111100000181ccc11110000000181cc111000000018811001aaaaa100000000000000000000000000000000000000000000000000000000000000000
00181111188810000188111188810000001881188810000001111100111111110000000000000000000000000000000000000000000000000000000000000000
00018888888881000018888888881000001888888881000000111000011111100000000000000000000000000000000000000000000000000000000000000000
00000070000000000000000000111100001111000011110000111100011000000000001111001111011111000000111001111111000011110000000000000000
00000000000000000070007000188100001aa100001bb10001bbb1101bb10000000111aaa1101aa11a11a11000001a1011a11a1111101aa10000000000000000
00000000007000000000007011184111111a9111111b31111bb1bb111bb111000111a1a11a111aa11a11a11111101a1011a11a11a1111aa10000000000000000
000000000070007000000000188848811aaa9aa11bbb3bb1011bb1111bb1b1101aa1a1aaaa11aaa11aaaa111aa111a1011aaaa1a1a111a110000000000000000
000000000000007000000000184444411a9999911b3333311bb1bb101bbbbb111aa1a1a11a11aa111a11a11aa1a111a11a11a11aaa1111110000000000000000
00700000000000700000000011144111111991111113311111bbb1111111b1111aaaa111111111101111111aaaa101111a11a11a1a11aa110000000000000000
00700000000000700000000000144111001991110013311101111111011111101a11a1111111aa100111111a11a101a1011111111a11a1110000000000000000
00700000000000000000000000111110001111100011111000111110000011001111110000011110000000111111011100000001111011110000000000000000
__gff__
000000000000a000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__map__
12121212121212121212121212121212121212c6060826061212121212121212c6060606060606c7c608c706120606061212121212121212121212121212121200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
120606061212121212060606060606120606060612120606123008060606c71206c60606c712120606121206120606061206460806062612060606460646120600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1206300606062612120630060606061206121206121212061212121212120612d606c7060612120606120630120606061230121212121212060646064612060600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
12060606121212121206121206260612061206300612060612c606060606d712060606120812c6d7d6060606060606121206460806062612060606460646060600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
120646061212121212061212061206120612060606060612120612121212121206d606083008d71206060606060606061206121212121212300646064606120600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
12061206121212121206060606121212061212121212061212d6060606124612121206121212121206061212121206061206121212121212060606460646060600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
12060606121212121206060606064612064608c712120612121212120626d712c606d712c6c7060606460806060606061206460806062612060646064612060600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
12121212121212121212121212121212121212d60606d7061212121212121212d6060606d706462612121212122612171212121212121212060606460646062600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__sfx__
00010000050700c070130701b0702007026070290702e0703007033070360703a0703d0703e0703e0703d0703c0603a06037060330602f0602a06025060210601d0601a060170601506014060140601505017050
